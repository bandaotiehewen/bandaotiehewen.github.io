<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[利用ssh反向代理以及autossh实现从外网连接内网服务器]]></title>
      <url>%2F2018%2F09%2F10%2F%E5%88%A9%E7%94%A8ssh%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%BB%A5%E5%8F%8Aautossh%E5%AE%9E%E7%8E%B0%E4%BB%8E%E5%A4%96%E7%BD%91%E8%BF%9E%E6%8E%A5%E5%86%85%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
      <content type="text"><![CDATA[1 背景对面实验室有一台装有GPU的服务器，最近想用来run一下深度学习的demo，比较下跟CPU的性能差别，所以想通过自己电脑或者家里电脑能够ssh到对面实验带有GPU的服务器。但是实验室的两个房间用的是不同的路由器，那么也就是处于不同的内网。起初，想通过“打洞”的方式，在对面实验室配置路由器，让服务器的IP绑定在路由器的某个端口上来实现外网访问内网的方式，但是失败了。查询资料，原因是因为很有可能对面实验室的路由器的IP也是出于学校内网的IP，所以是在多层内网之中，因此只在对面实验室的路由器配置“打洞”的端口到服务器的IP映射是失效的。通过Google，发现可以利用一台外网具有公网地址IP的机器来进行中转访问内网的服务，正好乐山的机器还在使用，这样就可以实现外网访问学校实验室内网服务器的需求，也就是我们所说的ssh“反向链接”。 2 原理2.1 什么是反向连接？反向连接是指主机A（受控端）主动连接主机B（控制端），在主机A和主机B之间建立一个远程连接，通过这个连接主机B可以主动的向主机A发送一些请求。 2.1 为什么需要主机A主动去连接主机B呢？这是因为主机A在局域网内，如果没有对主机A进行端口映射，对于主机B来说主机A是不可见的。而即使做了端口映射，也往往因为多层内网转发的原因，找不到真实的内网对应路由器的外网IP地址。如果在主机B这边向主机A发送连接请求，这个请求是不可达的。而主机B有自己独立的IP，对于主机A来说是可见的，可以直接向主机B请求连接。 2.3 SSH反向连接的过程方法就是主机A主动去连接主机B，主机B响应主机A的连接请求，它们之间就建立了一个远程连接。然后主机B在本地再创建一个本地连接，重定向到主机A和主机B刚才建立的远程连接上，之后对这个本地连接的操作都会反馈到远程连接上去。整个过程类似于文件的DUP，这就在主机A和主机B之间建立了连接通道，此时对于主机B来说，主机A已经是可见了。 3 实现过程3.1 配置假设有实验室内网GPU服务器A，外网固定IP机器B，以及另外一个实验室内网PC机C，甚至家里的个人PC机器D。现在无论B，C，D想远程SSH内网的A服务器都不行，原因上述A处于NAT的内网后端，无法穿透。假设机器的信息配置如下表： 机器性质 机器位置 IP地址 用户名 对面实验室GPU服务器:A 内网NAT后端 192.168.1.111 user_a 外网IP机器:B 外网公共IP 222.222.222.222 user_b 自己实验室内网PC机:C 内网NAT后端 192.168.1.250 user_c 3.2 首先在内网NAT后端机器A上的操作ssh -fCNR [B机器IP或省略]:[B机器端口]:[A机器的IP]:[A机器端口] [登陆B机器的用户名@服务器IP] 因此，在A机器上执行如下命令1ssh -fCNR 9999:localhost:22 user_b@222.222.222.222 对应的参数解释如下： -f 后台执行ssh指令-C 允许压缩数据-N 不执行远程指令-R 将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口 在外网机器B中通过命令： netstat -anp|grep 9999 可见端口9999已经被占用 此时，在内网机器A中建立到外网机器B的9999端口的连接，所有对9999端口访问的消息将转发到机器A的22端口，相当于远程端口映射。这时如果A主机连接本机的这个端口就可以实现控制B主机。 这里每次需要输入外网机器Buser_b的登陆密码，后面会讲到解决办法。 3.3 在外网机器B上的操作现在，只需要在外网B机器执行如下操作，就可以连接登录内网A机器。 ssh -p 9999 user_a@localhost 这是会提示输入机器A上用户user_a的密码。然后连接成功，实现从外网访问内网的功能。 如果想在内网机器C上访问内网机器A，那么需要先ssh登录到外网机器Br上，再执行上述命令ssh到内网机器A。如此，实现从内网机器C访问不同内网机器A的功能。 4 隧道稳定性的维持一开始提到，这种反向连接（Reverse Connection）不稳定，可能随时断开，需要内网主机A再次向外网B发起连接，这时需要个“朋友”帮你在内网B主机执行这条命令。它就是Autossh。 在此之前还要解决之前的一个问题，那就是每次内网主机B连接外网主机A时都需要输入密码，这个问题ssh本身是提供另外一种验证方式——通过密钥验证用户身份，实现自动登录。 4.1 在内网A主机上生产公钥和私钥使用ssh-keygen生成private key和public key，具体方法如下： 1234$ ssh-keygen...(一直按Enter，最后在~/.ssh/下生成密钥)$ ls ~/.ssh/id_rsa id_rsa.pub known_hosts 4.2 将内网A机器产生的公钥复制到外网B机器上 采用ssh-copy-id将key文件copy到B机器，继续执行： ssh-copy-id user_b@222.222.222.222 然后提示你输入登录机器B的密码，完成后下次就可以直接采用ssh -fCNR 9999:localhost:22 user_b@222.222.222.222的方式来无密码登录机器B了 4.3 实现autossh自动重连执行如下代码实现当服务器重启，获取网络中断的情况下实现自动重连功能： autossh -M 2222 -CNR 9999:localhost:22 user_b@222.222.222.222 当然如果没有autossh的话，需要先安装apt-get install autossh。 比之前的命令添加的一个-M 2222参数，负责通过2222端口监视连接状态，连接有问题时就会自动重连，去掉了一个-f参数，因为autossh本身就会在background运行。 5 终极方案：自动重启autossh当重启内网A主机，谁来自动Autossh呢，加入daemon吧，但我并没有实现。 以daemon方式执行，相当于root去执行autossh, ssh，这时刚才普通用户目录下的.ssh/authorized_keys文件会不起效。有两种办法解决，一种是用autossh的参数指定.ssh路径；另外一种是以普通用户身份执行daemon，下面是第二种方式。 /bin/su -c &apos;/usr/bin/autossh -M 2222 -NR 9999:localhost:22 user_b@222.222.222.222&apos; - user_a autossh还有很多参数，用来设置重连间隔等等。 将上面命令放入下面各启动方式中，根据自己系统自己配置： SysV：/etc/inid.d/autossh Upstart: /etc/init/autossh.conf systemd: /usr/lib/systemd/system/autossh.service 参考博客链接： SSH反向连接及Autossh 利用ssh反向代理以及autossh实现从外网连接内网服务器 ssh无密码登录和autossh实现反向ssh]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[新建SVN和转移Chance项目到IDEA的记录]]></title>
      <url>%2F2018%2F08%2F21%2F%E6%96%B0%E5%BB%BASVN%E5%92%8C%E8%BD%AC%E7%A7%BBChance%E9%A1%B9%E7%9B%AE%E5%88%B0IDEA%E7%9A%84%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[事因最近服务器又要到期了，六台每个是4000，一年24000。想着boss应该不会续费这么多，就主动建议停掉一半的备份，这样就只需要三台，费用12000，应该在boss的接受范围内。mainserver和redis备份都还简单，直接停掉，分别都只用一台。这样loadbalance，mainserver和registerserver都在177这台机器。105存储所有的redis实例，63用来运行新的校园实验实例，以及机器学习相关学习的平台，所以必须关闭32。32上面有很多内容，包括之前从140上面转移过来的脚本，以及SVN上面存储的代码。因此，面临重新建立SVN服务器到63上面的工作，以及使用IDEA重新拖取校园实验项目的工作。 问题一：新建SVN服务器搭建SVN服务器很简单，几句命令行就搞定。网上很多内容就不祥记，主要是在新建目录的时候出现了疑惑： 新建SVN目录和版本库： mkdir /home/chance/svn chmod -R 777 /home/chance/svn svnadmin create /home/chance/svn 这样就会在svn目录下生成： 进行配置权限密码和分组，并可以通过如下命令启动SVN： svnserve -d -r /home/chance/svn （-d：表示在后台运行 ，-r：指定服务器的根目录） 用如下命令查看svnserve是否已经运行: ps aux | grep svn 然后通过小乌龟查看svn://192.168.1.81就可以查看svn下的项目，但网上很多都是在/home/chance/svn中新建repository版本库，这时是通过svn://192.168.1.81/repository访问。也就是启动时候要注意的版本库文件目录跟启动命令行目录的关系。 问题二：防火墙端口没打开因为在之前安装了openvpn服务，为了转发内部数据包ping同，导致打开了utw的防火墙。开启以后默认所有的端口都不能访问，需要访问某个端口必须打开访问权限。 导致在客户端使用小乌龟访问SVN访问失败，开始一直怀疑是上述SVN的版本库的路径问题，但试了很久SVN的启动和路径问题，始终无法访问。仔细看了连接失败提示，是因为无法链接，一下想起来之前防火墙端口问题 首先查看当下防火墙端口开放情况： 打开SVN端口： 这下客户端小乌龟才能成功通过svn://192.168.1.81的地址内容。可见遇见问题不能靠意识感觉，需要时刻关注问题和提示 问题三：OpenVpn访问外网在脸上vpn下载SVN服务器内容的时候总是不能访问外网，很不方便，在网上查询找到解决办法，将下面代码执行。 iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE 问题四：IDEA通过SVN新建项目在IDEA中新建项目，选择从SVN导入。但途中遇到一个如下所示的问题，在项目JAVA文件的右下方有个红色的J符号，最开始个人感觉是找不到引用jar包，这又是主观武断判定的结果，然后就默认的到处更新jar引入的问题，但调试半天依然无法解决问题。经过查 原因：项目不可以编译，那么就可能是编译路径，编译Source的地址等等不对导致的 解决办法有三个步骤： 第一步：File里打开project structure找到Modules，其中有个Sources，点击右边第一个×，然后点击下面的Add Content Root按钮(这个按钮不容易看见…仔细看,就在那个Mark as下面),重新选择刚刚的项目，就可以了。 第二步：设定Project中的”Project compiler output” ，如下图所示，一般都是项目名下面新建的out文件夹下。 第三步：在Modules设置里勾选”Inherit project compile path” 问题五：激活IDEA之前很多都是通过idea license server在网上找可用服务的网址来验证，今天找了很多都不行，然后发现一个通过激活码的方法，将下列激活码输入。 EB101IWSWD-eyJsaWNlbnNlSWQiOiJFQjEwMUlXU1dEIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In1dLCJoYXNoIjoiNjk0NDAzMi8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-Gbb7jeR8JWOVxdUFaXfJzVU/O7c7xHQyaidCnhYLp7v32zdeXiHUU7vlrrm5y9ZX0lmQk3plCCsW+phrC9gGAPd6WDKhkal10qVNg0larCR2tQ3u8jfv1t2JAvWrMOJfFG9kKsJuw1P4TozZ/E7Qvj1cupf/rldhoOmaXMyABxNN1af1RV3bVhe4FFZe0p7xlIJF/ctZkFK62HYmh8V3AyhUNTzrvK2k+t/tlDJz2LnW7nYttBLHld8LabPlEEjpTHswhzlthzhVqALIgvF0uNbIJ5Uwpb7NqR4U/2ob0Z+FIcRpFUIAHEAw+RLGwkCge5DyZKfx+RoRJ/In4q/UpA==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog== 然后将下面代码放在电脑里面的hosts文件中。hosts文件的地址是：C:\Windows\System32\drivers\etc\hosts 0.0.0.0 account.jetbrains.com 结语遇见问题不能主观判定或者自己觉得是怎样，仔细看提示，分析，思考，友好的查询解决方法，这样才能高效率的找到解决办法。还有就是在每一个问题的时候，不仅只是当时把问题解决，还需要当时理解原因，并保持回忆，知道基本的问题来由和解决的方法，并在下次遇见就能快速检索并给出答案]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ubuntu下安装openvpn]]></title>
      <url>%2F2018%2F04%2F27%2Fopenvpn%2F</url>
      <content type="text"><![CDATA[以前波哥搭建的openvpn因为服务器到期就被关停了，然后现在不能访问服务器中只开放了内网访问地址的数据库，所有需要自己搭建一个openvpn。开始在网上搜索找到的是pptpd，安装运行简单，但说可能不稳定，而且之前用的也是openvpn的客户端，所以重新搭建安装openvpn，在此记录下过程，大部分是别人博客内容中的搬运，但也算是一种体验。 安装openvpn首先，在服务器端安装 OpenVPN 服务。我们可以很方便地通过 apt-get 安装，另外我们也需要安装easy-rsa： $ apt-get install openvpn $ apt-get install easy-rsa 安装成功后，拷贝“easy-rsa”到openvpn文件夹，并进入到该目录： $ make-cadir ~/openvpn-ca $ cd ~/openvpn-ca 也相当于如下的命令： $ cd /home/username/ $ mkdir openvpn-ca $ cp -r /usr/share/easy-rsa/* /home/username/openvpn-ca 配置CA变量进入 openvpn-ca 目录之后，用 vim (或者任意编辑器) 打开 vars 文件，到最后一部分，你将会看到如下内容： . . . export KEY_COUNTRY=&quot;US&quot; export KEY_PROVINCE=&quot;CA&quot; export KEY_CITY=&quot;SanFrancisco&quot; export KEY_ORG=&quot;Fort-Funston&quot; export KEY_EMAIL=&quot;me@myhost.mydomain&quot; export KEY_OU=&quot;MyOrganizationalUnit&quot; . . . 修改为任意你想要修改的值，只要不留空就好了： . . . export KEY_COUNTRY=&quot;CN&quot; export KEY_PROVINCE=&quot;SiChuan&quot; export KEY_CITY=&quot;Chengdu&quot; export KEY_ORG=&quot;wsn&quot; export KEY_EMAIL=&quot;what@the.fuck&quot; export KEY_OU=&quot;Community&quot; . . . 然后，还需要将 KEY_NAME 改为你喜欢的，这里简单起见，我们改成 server：（如果不改成server，在下面有个命令生成服务器配置文件需要注意更换） export KEY_NAME=&quot;server&quot; 然后，保存并关闭文件。 构建 Certificate Authority在刚才的目录中，执行 source vars ，然后，你将会看到如下输出： NOTE: If you run ./clean-all, I will be doing a rm -rf on /home/xlzd/openvpn-ca/keys 然后执行： $ ./clean-all $ ./build-ca 这将会启动创建根证书颁发密钥、证书的过程。由于我们刚才修改了 vars 文件，所有值应该都会自动填充。所以，一路回车就好了。这时会显示输出之前新更改的配置信息。到此，我们就有了创建以下步骤需要的 CA 证书。 创建服务器端证书、密钥和加密文件执行 ./build-key-server server 命令(此处的server与上面export KEY_NAME=”server”一致)，制作过程中一路回车，中间出现 challenge password ，不要输入任何值回车就行，最后的会有两个问题，你需要输入两次 y 注册证书和提交： . . . Certificate is to be certified until May 1 17:51:16 2026 GMT (3650 days) Sign the certificate? [y/n]:y 1 out of 1 certificate requests certified, commit? [y/n]y Write out database with 1 new entries Data Base Updated 然后还需要生成一些其他东西，在终端执行 ./build-dh，这个操作大约会花费几分钟不等。然后，我们可以生成 HMAC 签名加强服务器的 TLS 完整性验证功能： $openvpn --genkey --secret keys/ta.key 生成客户端证书、密钥对这一步之后可能会执行多次以生成不同的证书，这里我们以 client_one 作为第一组密钥对的名字： $cd ~/openvpn-ca $source vars $./build-key client_one 跟刚才一样，一路回车就好。如果你想生成一个带密码保护的凭证，可以使用build-key-pass命令： $cd ~/openvpn-ca $source vars $./build-key-pass client_one 配置 OpenVPN 服务首先，复制文件到 OpenVPN 的目录下： $ cd ~/openvpn-ca/keys $ sudo cp ca.crt ca.key server.crt server.key ta.key dh2048.pem /etc/openvpn 然后，复制并解压一个 OpenVPN 的配置示例： $cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz /etc/openvpn/ $cd /etc/openvpn $gunzip -d /etc/openvpn/server.conf.gz 然后更改server.conf中的配置： #这里是重点，必须指定SSL/TLS root certificate (ca), #certificate(cert), and private key (key) #ca文件是服务端和客户端都必须使用的，但不需要ca.key #服务端和客户端指定各自的.crt和.key #请注意路径,可以使用以配置文件开始为根的相对路径, #也可以使用绝对路径 #请小心存放.key密钥文件 ca ca.crt cert server.crt（与export KEY_NAME=&quot;server&quot;一致） key server.key（与export KEY_NAME=&quot;server&quot;一致） dh dh2048.pem #取消前面的;注释，这样可以使客户端的所有流量都必须经过VPN转发 push &quot;redirect-gateway def1 bypass-dhcp&quot; #取消前面的;注释，并设置DNS服务器的地址，该DNS信息将推送到 #客户端并设置到TAP网卡中 push &quot;dhcp-option DNS 223.5.5.5&quot; push &quot;dhcp-option DNS 114.114.114.114&quot; #再找到 tls-auth 位置，去掉注释，并在下面新增一行 tls-auth ta.key 0 # This file is secret key-direction 0 #取消前面的;注释，使客户端之间可以互通，根据实际需要决定是否 #开启，默认客户端之间是不能直接通讯的 client-to-client duplicate-cn user nobody group nogroup #取消前面的;注释，并设置log保存的位置 log openvpn.log 调整服务器网络配置允许IP转发编辑 /etc/sysctl.conf 文件，去掉 net.ipv4.ip_forward 设置前的注释： net.ipv4.ip_forward=1 输入 sudo sysctl -p 以读取文件并对当前会话生效。 调整 UFW 规则iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE （通用方法，自动获取eth0网卡的IP地址） 其中eth0是内网地址，这个也是保证能够ping通内网的其他服务器的保证。 接着需要修改 /etc/default/ufw 文件，找到 DEFAULT_FORWARD_POLICY 设置，修改为： DEFAULT_FORWARD_POLICY=&quot;ACCEPT&quot; 打开 OpenVPN 端口并使变化生效执行下面的命令： $ sudo ufw allow 1194/udp $ sudo ufw disable $ sudo ufw enable 启动 OpenVPNservice openvpn restart 客户端配置然后将服务器端生成的证书和密钥文件，在/home/username/openvpn-ca文件夹下（ca.crt，client_one.crt，client_one.key，ta.key）下载到本地。以及/usr/share/doc/openvpn/examples/sample-config-files/client.conf文件下载到本地，然后修改client.conf为client.ovpn，并且更改其中配置： client #指明这是客户端 dev tun #基于路由的隧道 proto udp #采用UDP协议 remote 222.214.XXX.XXX 1194 #服务端IP及端口号 ca ca.crt #证书及密钥们 cert client_one.crt(一定与自己的文件名吻合) key client_one.key(一定与自己的文件名吻合) tls-auth ta.key 1 #TLS密钥，1表示客户端 key-direction 1 #新增 安装主要参考：怎样在 Ubuntu 16.04 上安装 OpenVPN 服务(转自知乎)与烂泥：ubuntu 14.04搭建OpenVPN服务器 配置文件：烂泥：openvpn配置文件详解 ping同内网服务器：烂泥：openvpn tun模式下客户端与内网机器通信]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Windows安装pytorch]]></title>
      <url>%2F2018%2F04%2F15%2FWindows%E5%AE%89%E8%A3%85pytorch%2F</url>
      <content type="text"><![CDATA[简介官网现在不能在Windows下安装pytorch（计划0.4版本后开始支持），但为了能在电脑上方便使用pycharm调写代码，发现知乎用户蒲嘉宸在维护编译好的Windows安装包，直接在anaconda3环境下就可以安装使用。本文也参考了他的知乎文章的一些内容。 安装条件作者提供了不同的安装包针对不同的环境，但有一些基本的条件需要注意： Anaconda3 x64 (with Python 3.5/3.6) Windows 64位系统（Windows 7 或 Windows Server 2008 及以上） GPU版本还需要任意版本的 CUDA （包内置了CUDA 8 / 9 的部分主要二进制文件） 如果没有GPU的话，只是为了快速上手可以使用cpu版本。为了加快conda的安装速度，可以使用清华的源 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --set show_channel_urls yes 安装conda包可以通过在线直接安装，但作者提供百度云直接下载安装文件本地安装，快速便捷。如果电脑有cuda和cudnn的支持，可以选择带有cuda和cudnn标识的版本，如果没有就安装只是cpu标识的版本。经过本人测试发现，cuda的capacity值需要大于5才能支持使用，如果过下，依然代码可以通过，但是无法使用GPU加速。但是如果没有cuda的GPU，就会报错，这时就只能coda remove pytorch然后重新安装cpu版本。安装代码如下： cd &quot;下载包的路径&quot; conda install numpy mkl cffi conda install pytorch????.tar.bz2 如果出现以下的错误提示，就是很可能GPU不支持，马上更换为cpu版本。 Traceback (most recent call last): File &quot;test.py&quot;, line 2, in &lt;module&gt; import torch File &quot;C:\Anaconda3\lib\site-packages\torch\__init__.py&quot;, line 41, in &lt;module&gt; from torch._C import * ImportError: DLL load failed: The specified module could not be found. 测试代码# CUDA TEST import torch x = torch.Tensor([1.0]) xx = x.cuda() print(xx) # CUDNN TEST from torch.backends import cudnn print(cudnn.is_acceptable(xx)) 如果CUDA工作不正常，那就不能使用.cuda()将模型和数据通过GPU进行加速了。而如果cuDNN不能正常工作，那就使用如下代码关掉它： cudnn.enabled = False 安装torchvisionTorchvision不是pytorch的一部分内容，是Python的另外一个包，需要用pip来安装，使用conda是安装不了的。但如果直接使用pip install torchvision安装可能会出错，经过查询资料应该使用pip install –no-deps torchvision命令，而很多其他不知道哪儿抄来的博客写的是pip install no-deps torchvision，坑人不浅 测试pytorch是否安装成功为了初步尝试pytorch在本地电脑的使用体验，可以去官方下载例子，也可以使用这个fashion-mnist例子来运行体验下本地测试的性能速度。 收获Windows的cmd太难用了，查询一款超好用的本地命令行终端cmder，颜值可功能都友好，同时支持一些Linux的命令操作，更加的方便操作。]]></content>
    </entry>

    
  
  
</search>
